import streamlit as st
import mlflow
import mlflow.sklearn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from mlflow.models import infer_signature
from PIL import Image, ImageOps
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans, DBSCAN
import cv2
from streamlit_drawable_canvas import st_canvas

# C·∫•u h√¨nh MLflow
MLFLOW_TRACKING_URI = "http://localhost:5000"  # Thay b·∫±ng URL c·ªßa MLflow server n·∫øu ch·∫°y t·ª´ xa
mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)
mlflow.set_experiment("MNIST_Classification")

# Load MNIST dataset
@st.cache_data
def load_data():
    mnist = fetch_openml('mnist_784', version=1, as_frame=False)
    X, y = mnist.data / 255.0, mnist.target.astype(int)
    return train_test_split(X, y, test_size=0.2, random_state=42)

X_train, X_test, y_train, y_test = load_data()

# T·∫£i ho·∫∑c hu·∫•n luy·ªán m√¥ h√¨nh t·ª´ MLflow
def load_or_train_model(model_name):
    try:
        model_uri = f"models:/{model_name}/latest"
        model = mlflow.sklearn.load_model(model_uri)
        st.info("üîÑ ƒê√£ t·∫£i m√¥ h√¨nh t·ª´ MLflow.")
    except Exception:
        st.warning("üöÄ Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh tr√™n MLflow. B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán...")
        model, acc = train_model(model_name)
        mlflow.sklearn.log_model(model, model_name, registered_model_name=model_name)
        st.success(f"M√¥ h√¨nh {model_name} ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω tr√™n MLflow v·ªõi ƒë·ªô ch√≠nh x√°c: {acc:.4f}")
    return model

# Hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi MLflow
def train_model(model_name):
    with mlflow.start_run():
        if model_name == "Decision Tree":
            model = DecisionTreeClassifier()
        elif model_name == "SVM":
            model = SVC()
        
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        acc = accuracy_score(y_test, y_pred)
        
        input_example = X_test[:5]
        signature = infer_signature(input_example, model.predict(input_example))
        
        mlflow.log_param("model", model_name)
        mlflow.log_metric("accuracy", acc)
        mlflow.sklearn.log_model(model, model_name, signature=signature, input_example=input_example, registered_model_name=model_name)
        
        return model, acc
def clustering(algorithm):
    st.subheader(f"Ph√¢n c·ª•m v·ªõi {algorithm}")
    
    sample_size = 5000  # Gi·ªõi h·∫°n m·∫´u ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô
    X_sample = X_train[:sample_size]
    
    # Gi·∫£m chi·ªÅu d·ªØ li·ªáu xu·ªëng 2D ƒë·ªÉ hi·ªÉn th·ªã tr·ª±c quan
    pca = PCA(n_components=2)
    X_sample_pca = pca.fit_transform(X_sample)
    
    if algorithm == "K-Means":
        model = KMeans(n_clusters=10, random_state=42)
    elif algorithm == "DBSCAN":
        model = DBSCAN(eps=3, min_samples=10)
    
    clusters = model.fit_predict(X_sample_pca)
    
    fig, ax = plt.subplots()
    scatter = ax.scatter(X_sample_pca[:, 0], X_sample_pca[:, 1], c=clusters, cmap='tab10', alpha=0.5)
    legend1 = ax.legend(*scatter.legend_elements(), title="C·ª•m")
    ax.add_artist(legend1)
    ax.set_xlabel("PCA 1")
    ax.set_ylabel("PCA 2")
    st.pyplot(fig)
    
st.title("MNIST Classification & Clustering with Streamlit & MLFlow")

st.header("üì• Thu th·∫≠p d·ªØ li·ªáu")
@st.cache_data
def load_data():
    mnist = fetch_openml('mnist_784', version=1, as_frame=False)
    X, y = mnist.data / 255.0, mnist.target.astype(int)
    return train_test_split(X, y, test_size=0.2, random_state=42)

X_train, X_test, y_train, y_test = load_data()
st.success("‚úÖ D·ªØ li·ªáu MNIST ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")

# 2. X·ª≠ l√Ω d·ªØ li·ªáu
st.header("‚öôÔ∏è X·ª≠ l√Ω d·ªØ li·ªáu")
st.write("Chu·∫©n h√≥a d·ªØ li·ªáu b·∫±ng c√°ch chia c√°c gi√° tr·ªã pixel cho 255 ƒë·ªÉ ƒë∆∞a v·ªÅ kho·∫£ng [0,1].")
st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a!")

# 3. Chia d·ªØ li·ªáu
st.header("‚úÇÔ∏è Chia d·ªØ li·ªáu")
st.write(f"T·∫≠p hu·∫•n luy·ªán: {len(X_train)} m·∫´u, T·∫≠p ki·ªÉm tra: {len(X_test)} m·∫´u")
st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chia th√†nh t·∫≠p hu·∫•n luy·ªán v√† ki·ªÉm tra!")

# Ch·ªçn m√¥ h√¨nh v√† hu·∫•n luy·ªán
model_choice = st.selectbox("Ch·ªçn m√¥ h√¨nh ph√¢n lo·∫°i:", ["Decision Tree", "SVM"])
if st.button("T·∫£i ho·∫∑c Hu·∫•n luy·ªán m√¥ h√¨nh"):
    model = load_or_train_model(model_choice)
clustering_choice = st.selectbox("Ch·ªçn thu·∫≠t to√°n ph√¢n c·ª•m:", ["K-Means", "DBSCAN"])
if st.button("Th·ª±c hi·ªán ph√¢n c·ª•m"):
    clustering(clustering_choice)
# V·∫Ω s·ªë ho·∫∑c t·∫£i ·∫£nh ƒë·ªÉ d·ª± ƒëo√°n
st.subheader("V·∫Ω s·ªë ho·∫∑c t·∫£i ·∫£nh ƒë·ªÉ d·ª± ƒëo√°n")
try:
    canvas_result = st_canvas(
        fill_color="white",
        stroke_width=10,
        stroke_color="black",
        background_color="white",
        height=280,
        width=280,
        drawing_mode="freedraw",
        key="canvas",
        display_toolbar=True
    )
except Exception as e:
    st.error(f"L·ªói khi t·∫£i canvas: {e}")

canvas = st.file_uploader("T·∫£i ·∫£nh l√™n (28x28 px)", type=["png", "jpg", "jpeg"])

if canvas or (canvas_result is not None and canvas_result.image_data is not None):
    if canvas:
        image = Image.open(canvas).convert('L')
    elif canvas_result.image_data is not None:
        image = Image.fromarray((255 - np.array(canvas_result.image_data[:, :, 0])).astype(np.uint8))
    
    image = image.resize((28, 28))
    image = np.array(image).reshape(1, -1) / 255.0
    
    try:
        model_uri = f"models:/{model_choice}/latest"
        model = mlflow.sklearn.load_model(model_uri)
        prediction = model.predict(image)[0]
        st.write(f"D·ª± ƒëo√°n: {prediction}")
    except Exception:
        st.error("Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc!")
