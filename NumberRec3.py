import streamlit as st
import mlflow
import mlflow.sklearn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.cluster import KMeans, DBSCAN
from sklearn.decomposition import PCA
from PIL import Image, ImageOps
import cv2
from streamlit_drawable_canvas import st_canvas

# Load MNIST dataset
@st.cache_data
def load_data():
    mnist = fetch_openml('mnist_784', version=1, as_frame=False)
    X, y = mnist.data / 255.0, mnist.target.astype(int)
    return train_test_split(X, y, test_size=0.2, random_state=42)

X_train, X_test, y_train, y_test = load_data()

# L√Ω thuy·∫øt v·ªÅ K-Means v√† DBSCAN
def ly_thuyet_kmeans():
    st.subheader("üìñ L√Ω thuy·∫øt v·ªÅ K-Means")
    st.write("""
    - **K-Means** l√† thu·∫≠t to√°n ph√¢n c·ª•m ph·ªï bi·∫øn nh·∫•t, ho·∫°t ƒë·ªông d·ª±a tr√™n nguy√™n t·∫Øc:
        1. Ch·ªçn ng·∫´u nhi√™n k ƒëi·ªÉm l√†m trung t√¢m c·ª•m.
        2. G√°n m·ªói ƒëi·ªÉm d·ªØ li·ªáu v√†o c·ª•m c√≥ trung t√¢m g·∫ßn nh·∫•t.
        3. C·∫≠p nh·∫≠t trung t√¢m c·ª•m b·∫±ng c√°ch t√≠nh trung b√¨nh c√°c ƒëi·ªÉm trong c·ª•m.
        4. L·∫∑p l·∫°i cho ƒë·∫øn khi kh√¥ng c√≤n thay ƒë·ªïi.
    - K-Means ho·∫°t ƒë·ªông t·ªët v·ªõi d·ªØ li·ªáu c√≥ c·∫•u tr√∫c r√µ r√†ng nh∆∞ng nh·∫°y c·∫£m v·ªõi outliers.
    """)
    st.image("kmeans.png", caption="Minh h·ªça thu·∫≠t to√°n K-Means")

def ly_thuyet_dbscan():
    st.subheader("üìñ L√Ω thuy·∫øt v·ªÅ DBSCAN")
    st.write("""
    - **DBSCAN (Density-Based Spatial Clustering of Applications with Noise)** l√† thu·∫≠t to√°n ph√¢n c·ª•m d·ª±a tr√™n m·∫≠t ƒë·ªô:
        1. X√°c ƒë·ªãnh ƒëi·ªÉm l√µi c√≥ √≠t nh·∫•t MinPts ƒëi·ªÉm l√¢n c·∫≠n trong ph·∫°m vi epsilon.
        2. K·∫øt n·ªëi c√°c ƒëi·ªÉm l√µi v·ªõi nhau ƒë·ªÉ t·∫°o th√†nh c·ª•m.
        3. ƒêi·ªÉm nhi·ªÖu kh√¥ng thu·ªôc c·ª•m n√†o s·∫Ω b·ªã ƒë√°nh d·∫•u l√† outlier.
    - DBSCAN kh√¥ng c·∫ßn x√°c ƒë·ªãnh s·ªë c·ª•m tr∆∞·ªõc v√† ho·∫°t ƒë·ªông t·ªët v·ªõi d·ªØ li·ªáu nhi·ªÖu.
    """)
    st.image("dbscan.png", caption="Minh h·ªça thu·∫≠t to√°n DBSCAN")

# Hu·∫•n luy·ªán m√¥ h√¨nh
def train_model(model_name):
    with mlflow.start_run():
        if model_name == "Decision Tree":
            model = DecisionTreeClassifier()
        elif model_name == "SVM":
            model = SVC()
        
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        acc = accuracy_score(y_test, y_pred)
        
        mlflow.log_param("model", model_name)
        mlflow.log_metric("accuracy", acc)
        mlflow.sklearn.log_model(model, model_name)
        
        return model, acc

# Ph√¢n c·ª•m K-Means v√† DBSCAN v·ªõi PCA
def clustering(algorithm):
    st.subheader(f"Ph√¢n c·ª•m v·ªõi {algorithm}")
    
    sample_size = 5000  # Gi·ªõi h·∫°n m·∫´u ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô
    X_sample = X_train[:sample_size]
    
    # Gi·∫£m chi·ªÅu d·ªØ li·ªáu xu·ªëng 2D ƒë·ªÉ hi·ªÉn th·ªã tr·ª±c quan
    pca = PCA(n_components=2)
    X_sample_pca = pca.fit_transform(X_sample)
    
    if algorithm == "K-Means":
        model = KMeans(n_clusters=10, random_state=42)
    elif algorithm == "DBSCAN":
        model = DBSCAN(eps=3, min_samples=10)
    
    clusters = model.fit_predict(X_sample_pca)
    
    fig, ax = plt.subplots()
    scatter = ax.scatter(X_sample_pca[:, 0], X_sample_pca[:, 1], c=clusters, cmap='tab10', alpha=0.5)
    legend1 = ax.legend(*scatter.legend_elements(), title="C·ª•m")
    ax.add_artist(legend1)
    ax.set_xlabel("PCA 1")
    ax.set_ylabel("PCA 2")
    st.pyplot(fig)

st.title("MNIST Classification & Clustering with Streamlit & MLFlow")

# Tabs cho c√°c ch·ª©c nƒÉng
tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìä Ph√¢n lo·∫°i", "üîç Ph√¢n c·ª•m", "üìñ K-Means", "üìñ DBSCAN", "üé® D·ª± ƒëo√°n t·ª´ v·∫Ω"])

with tab1:
    model_choice = st.selectbox("Ch·ªçn m√¥ h√¨nh ph√¢n lo·∫°i:", ["Decision Tree", "SVM"])
    if st.button("Hu·∫•n luy·ªán"):
        model, acc = train_model(model_choice)
        st.success(f"M√¥ h√¨nh {model_choice} hu·∫•n luy·ªán xong v·ªõi ƒë·ªô ch√≠nh x√°c: {acc:.4f}")

with tab2:
    clustering_choice = st.selectbox("Ch·ªçn thu·∫≠t to√°n ph√¢n c·ª•m:", ["K-Means", "DBSCAN"])
    if st.button("Th·ª±c hi·ªán ph√¢n c·ª•m"):
        clustering(clustering_choice)

with tab3:
    ly_thuyet_kmeans()

with tab4:
    ly_thuyet_dbscan()

with tab5:
    st.subheader("V·∫Ω s·ªë ho·∫∑c t·∫£i ·∫£nh ƒë·ªÉ d·ª± ƒëo√°n")
    
    # Ki·ªÉm tra xem th∆∞ vi·ªán c√≥ ho·∫°t ƒë·ªông ƒë√∫ng kh√¥ng
    try:
        canvas_result = st_canvas(
            fill_color="white",
            stroke_width=10,
            stroke_color="black",
            background_color="white",
            height=280,
            width=280,
            drawing_mode="freedraw",
            key="canvas",
            display_toolbar=True
        )
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i canvas: {e}")
    
    canvas = st.file_uploader("T·∫£i ·∫£nh l√™n (28x28 px)", type=["png", "jpg", "jpeg"])
    
    if canvas or (canvas_result is not None and canvas_result.image_data is not None):
        if canvas:
            image = Image.open(canvas).convert('L')
        elif canvas_result.image_data is not None:
            image = Image.fromarray((255 - np.array(canvas_result.image_data[:, :, 0])).astype(np.uint8))
        
        image = image.resize((28, 28))
        image = np.array(image).reshape(1, -1) / 255.0
        
        if 'model' in locals():
            prediction = model.predict(image)[0]
            st.write(f"D·ª± ƒëo√°n: {prediction}")
        else:
            st.error("Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc!")